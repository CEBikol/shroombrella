use crate::{
    settings::Settings,
    storage,
    ui::{
        password_manager_ui::PasswordManager, settings_ui::SettingsWindow,
        theme_creator_ui::ThemeCreator, vault_creator_ui::VaultCreator,
    },
};
use eframe::egui::{self, Widget};
use std::path::PathBuf;

pub struct PasswordApp {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    state: AppState,

    // –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    selected_vault_path: Option<PathBuf>,
    master_password: String,
    error_message: String,

    // –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π
    password_manager: PasswordManager,

    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    available_vaults: Vec<PathBuf>,

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_window: SettingsWindow,
    theme_creator: ThemeCreator,
    vault_creator: VaultCreator,
    settings_applied: bool,
}

#[derive(PartialEq)]
pub enum AppState {
    Locked,
    Unlocked,
}

impl Default for PasswordApp {
    fn default() -> Self {
        let settings = Settings::load();
        let available_vaults = storage::get_available_vaults();
        let selected_vault_path = if !available_vaults.is_empty() {
            Some(available_vaults[0].clone())
        } else {
            None
        };

        let password_manager = PasswordManager::new();
        let settings_window = SettingsWindow::new(settings);
        let theme_creator = ThemeCreator::new();
        let vault_creator = VaultCreator::new();
        let settings_applied = false;

        Self {
            state: AppState::Locked,
            selected_vault_path,
            master_password: String::new(),
            error_message: String::new(),
            password_manager,
            available_vaults,
            settings_window,
            theme_creator,
            vault_creator,
            settings_applied,
        }
    }
}

impl eframe::App for PasswordApp {
    // –í src/app.rs, –º–µ—Ç–æ–¥ update
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI
        let current_settings = self.settings_window.get_current_settings();
        ctx.set_pixels_per_point(current_settings.ui_scale);
        if let Ok(theme) = current_settings.load_theme() {
            ctx.set_visuals(theme.to_egui_visuals());
        }

        egui::TopBottomPanel::top("custom_title_bar").show(ctx, |ui| {
            ui.horizontal(|ui| {
                // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –í–°–Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                let drag_response = ui.allocate_response(ui.available_size(), egui::Sense::drag());

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–∫–Ω–∞
                if drag_response.dragged() {
                    ctx.send_viewport_cmd(egui::ViewportCommand::StartDrag);
                }
                drag_response.on_hover_cursor(egui::CursorIcon::Grab);

                // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–±—É–¥–µ—Ç –ø–æ–≤–µ—Ä—Ö –æ–±–ª–∞—Å—Ç–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è)
                ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                    let close_btn = egui::Button::new("X")
                        .frame(false)
                        .fill(egui::Color32::TRANSPARENT)
                        .stroke(egui::Stroke::NONE);

                    if ui.add(close_btn).clicked() {
                        ctx.send_viewport_cmd(egui::ViewportCommand::Close);
                    }
                });
            });
        });

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å
        egui::CentralPanel::default().show(ctx, |ui| match self.state {
            AppState::Locked => {
                self.show_login_form(ui);
            }
            AppState::Unlocked => {
                if !self.password_manager.ui(ui) {
                    self.logout();
                }
            }
        });

        //  –ü–æ–¥–≤–∞–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –≤–µ—Ä—Å–∏–µ–π
        egui::TopBottomPanel::bottom("footer").show(ctx, |ui| {
            ui.horizontal(|ui| {
                // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ª–µ–≤–∞
                if ui.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏").clicked() {
                    self.settings_window.show = true;
                }

                // –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞
                ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                    ui.label(format!("v{}", env!("CARGO_PKG_VERSION")));
                });
            });
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        self.settings_applied = if self.settings_window.show {
            self.settings_window.show(ctx)
        } else {
            false
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.theme_creator.show {
            self.theme_creator.show(ctx);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.vault_creator.show {
            self.vault_creator.show(ctx);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã
        if self.settings_window.take_create_theme_request() {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º–æ–π –∫–∞–∫ —à–∞–±–ª–æ–Ω–æ–º
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–û–•–†–ê–ù–ï–ù–ù–£–Æ —Ç–µ–º—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            if let Ok(current_theme) = self.settings_window.get_current_settings().load_theme() {
                self.theme_creator.init_with_template(current_theme);
            }
            self.theme_creator.show = true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è
        let theme_created_or_list_changed = self.theme_creator.was_theme_created()
            || self.settings_window.take_theme_list_changed(); // <-- –ù–æ–≤—ã–π —Ñ–ª–∞–≥

        if theme_created_or_list_changed {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            self.settings_window.refresh_themes();
            // –ï—Å–ª–∏ —Ç–µ–º–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            if self.theme_creator.was_theme_created() {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
                self.theme_creator.show = false;
                // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
                self.theme_creator.clear_messages();
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.check_vault_creation();

        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã (–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"),
        // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –∏ –º–∞—Å—à—Ç–∞–± –∏–∑ –°–û–•–†–ê–ù–ï–ù–ù–´–• –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.settings_applied {
            // –≠—Ç–∏ –≤—ã–∑–æ–≤—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç —Ç–æ, —á—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏,
            // –Ω–æ —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
            let applied_settings = self.settings_window.get_current_settings();
            ctx.set_pixels_per_point(applied_settings.ui_scale);
            if let Ok(theme) = applied_settings.load_theme() {
                ctx.set_visuals(theme.to_egui_visuals());
            }
        }
    }
}

impl PasswordApp {
    fn show_login_form(&mut self, ui: &mut egui::Ui) {
        //  –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        ui.heading("Shroombrella");
        ui.separator();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if !self.error_message.is_empty() {
            ui.colored_label(egui::Color32::RED, &self.error_message);
            ui.separator();
        }

        // –í—ã–±–æ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        ui.label("–í—ã–±–µ—Ä–∏—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:");
        egui::ComboBox::from_id_salt("vault_selector")
            .selected_text(if let Some(path) = &self.selected_vault_path {
                path.file_name()
                    .unwrap_or_default()
                    .to_string_lossy()
                    .to_string()
            } else {
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â".to_string()
            })
            .show_ui(ui, |ui| {
                for vault_path in &self.available_vaults {
                    let filename = vault_path.file_name().unwrap_or_default().to_string_lossy();
                    if ui
                        .selectable_label(
                            self.selected_vault_path.as_ref() == Some(vault_path),
                            filename.to_string(),
                        )
                        .clicked()
                    {
                        self.selected_vault_path = Some(vault_path.clone());
                        self.error_message.clear();
                    }
                }
            });

        ui.add_space(10.0);

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏
        ui.horizontal(|ui| {
            if ui.button("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ").clicked() {
                self.vault_creator.show = true;
                self.vault_creator.vault_name.clear();
                self.vault_creator.master_password.clear();
                self.vault_creator.confirm_password.clear();
                self.vault_creator.clear_messages();
            }

            if ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å").clicked() {
                self.refresh_vault_list();
            }
        });

        ui.add_space(10.0);

        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        ui.label("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:");
        ui.horizontal(|ui| {
            ui.label("üîë");
            ui.add(egui::TextEdit::singleline(&mut self.master_password).password(true));
        });

        ui.add_space(10.0);

        // –ö–Ω–æ–ø–∫–∏
        ui.horizontal(|ui| {
            if ui.button("üîì –í–æ–π—Ç–∏").clicked() {
                self.attempt_login();
            }
        });
    }

    fn attempt_login(&mut self) {
        self.error_message.clear();

        if let Some(vault_path) = &self.selected_vault_path {
            match storage::load_vault_from_path(vault_path) {
                Ok(vault) => {
                    match vault.decrypt_entries(&self.master_password) {
                        Ok(entries) => {
                            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π
                            self.password_manager.set_vault(
                                vault,
                                entries,
                                self.master_password.clone(),
                                vault_path.clone(),
                            );
                            self.state = AppState::Unlocked;
                            self.master_password.clear();
                        }
                        Err(e) => {
                            self.error_message = e;
                        }
                    }
                }
                Err(e) => {
                    self.error_message = format!("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {}", e);
                }
            }
        } else {
            self.error_message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ".to_string();
        }
    }

    fn logout(&mut self) {
        self.state = AppState::Locked;
        self.password_manager.clear();
        self.error_message.clear();
    }

    fn refresh_vault_list(&mut self) {
        self.available_vaults = storage::get_available_vaults();
        if !self.available_vaults.is_empty() && self.selected_vault_path.is_none() {
            self.selected_vault_path = Some(self.available_vaults[0].clone());
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        self.settings_window.refresh_themes();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    fn check_vault_creation(&mut self) {
        if self.vault_creator.was_vault_created() {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ö—Ä–∞–Ω–∏–ª–∏—â
            self.refresh_vault_list();
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
            if let Some(vault_path) = self.vault_creator.take_created_vault_path() {
                self.selected_vault_path = Some(vault_path);
            }
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            self.vault_creator.show = false;
        }
    }
}
