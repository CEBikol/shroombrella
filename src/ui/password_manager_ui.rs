use crate::storage;
use crate::vault::{Entry, Vault};
use eframe::egui;
use std::path::PathBuf;
use zeroize::Zeroize;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
#[derive(Clone)]
pub struct EditEntry {
    pub index: usize,
    pub service: String,
    pub login: String,
    pub password: String,
}

impl zeroize::Zeroize for EditEntry {
    fn zeroize(&mut self) {
        self.service.zeroize();
        self.login.zeroize();
        self.password.zeroize();
    }
}

pub struct PasswordManager {
    pub current_vault: Option<Vault>,
    pub decrypted_entries: Vec<Entry>,
    pub master_password: String,
    pub vault_path: Option<PathBuf>,

    // –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    pub new_service: String,
    pub new_login: String,
    pub new_password: String,

    // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pub edit_entry: Option<EditEntry>,
    pub show_edit_dialog: bool,

    // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pub hovered_password_index: Option<usize>,
    pub error_message: String,

    app_state: bool,
}

impl zeroize::Zeroize for PasswordManager {
    fn zeroize(&mut self) {
        self.decrypted_entries.zeroize();
        self.master_password.zeroize();
        self.edit_entry.zeroize();
    }
}

impl PasswordManager {
    pub fn new() -> Self {
        Self {
            current_vault: None,
            decrypted_entries: Vec::new(),
            master_password: String::new(),
            vault_path: None,
            new_service: String::new(),
            new_login: String::new(),
            new_password: String::new(),
            edit_entry: None,
            show_edit_dialog: false,
            hovered_password_index: None,
            error_message: String::new(),
            app_state: true,
        }
    }

    pub fn ui(&mut self, ui: &mut egui::Ui) -> bool {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.show_header(ui);
        ui.separator();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if !self.error_message.is_empty() {
            ui.colored_label(egui::Color32::RED, &self.error_message);
            ui.separator();
        }

        // –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self.show_add_form(ui);
        ui.separator();

        // –¢–∞–±–ª–∏—Ü–∞ —Å –ø–∞—Ä–æ–ª—è–º–∏
        self.show_password_table(ui);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.show_edit_dialog {
            self.show_edit_dialog_ui(ui.ctx());
        }

        if !self.app_state {
            self.zeroize();
        }

        self.app_state
    }

    fn show_header(&mut self, ui: &mut egui::Ui) {
        ui.horizontal(|ui| {
            ui.heading(format!(
                "üóÑÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ: {}",
                self.current_vault
                    .as_ref()
                    .map(|v| v.name.clone())
                    .unwrap_or_default()
            ));

            ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
                if ui.button("üö™ –í—ã–π—Ç–∏").clicked() {
                    self.app_state = false;
                }
            });
        });
    }

    fn show_add_form(&mut self, ui: &mut egui::Ui) {
        ui.heading("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å");

        ui.horizontal(|ui| {
            ui.label("üåê –°–µ—Ä–≤–∏—Å:");
            ui.text_edit_singleline(&mut self.new_service);
        });

        ui.horizontal(|ui| {
            ui.label("üë§ –õ–æ–≥–∏–Ω:");
            ui.text_edit_singleline(&mut self.new_login);
        });

        ui.horizontal(|ui| {
            ui.label("üîë –ü–∞—Ä–æ–ª—å:");
            ui.text_edit_singleline(&mut self.new_password);
        });

        let all_filled = !self.new_service.is_empty()
            && !self.new_login.is_empty()
            && !self.new_password.is_empty();

        ui.horizontal(|ui| {
            if ui
                .add_enabled(all_filled, egui::Button::new("‚ûï –î–æ–±–∞–≤–∏—Ç—å"))
                .clicked()
            {
                self.add_new_entry();
            }

            if ui.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å").clicked() {
                self.new_password = self.generate_password(16);
            }

            if ui.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å").clicked() {
                self.save_vault();
            }
        });
    }

    fn show_password_table(&mut self, ui: &mut egui::Ui) {
        if self.decrypted_entries.is_empty() {
            ui.centered_and_justified(|ui| {
                ui.label("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π");
            });
            return;
        }

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        egui::Grid::new("passwords_header")
            .spacing([20.0, 8.0])
            .min_col_width(150.0)
            .show(ui, |ui| {
                ui.heading("üåê –°–µ—Ä–≤–∏—Å");
                ui.heading("üë§ –õ–æ–≥–∏–Ω");
                ui.heading("üîë –ü–∞—Ä–æ–ª—å");
                ui.heading(""); // –î–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
                ui.end_row();
            });

        ui.separator();

        // –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø–∞—Ä–æ–ª—è–º–∏
        egui::ScrollArea::vertical().show(ui, |ui| {
            egui::Grid::new("passwords_grid")
                .striped(true)
                .spacing([20.0, 8.0])
                .min_col_width(150.0)
                .show(ui, |ui| {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                    let entries_count = self.decrypted_entries.len();
                    for index in 0..entries_count {
                        if let Some(entry) = self.decrypted_entries.get(index) {
                            let service = entry.service.clone();
                            let login = entry.login.clone();
                            let password = entry.password.clone();

                            ui.label(&service);
                            ui.label(&login);

                            // –°–∫—Ä—ã—Ç–∏–µ/–ø–æ–∫–∞–∑ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                            let password_text = if self.hovered_password_index == Some(index) {
                                password.clone()
                            } else {
                                "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢".to_string()
                            };

                            let response = ui.add(egui::Label::new(password_text));
                            if response.hovered() {
                                self.hovered_password_index = Some(index);
                            } else if self.hovered_password_index == Some(index) {
                                self.hovered_password_index = None;
                            }

                            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è –∑–∞–º—ã–∫–∞–Ω–∏–π)
                            let index_copy = index;
                            let password_copy = password.clone();

                            ui.horizontal(|ui| {
                                if ui.button("üìã").on_hover_text("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å").clicked()
                                {
                                    ui.ctx().copy_text(password_copy);
                                }

                                if ui.button("‚úèÔ∏è").on_hover_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å").clicked()
                                {
                                    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                    if let Some(entry) =
                                        self.decrypted_entries.get(index_copy).cloned()
                                    {
                                        self.edit_entry = Some(EditEntry {
                                            index: index_copy,
                                            service: entry.service,
                                            login: entry.login,
                                            password: entry.password,
                                        });
                                        self.show_edit_dialog = true;
                                    }
                                }

                                if ui.button("üóëÔ∏è").on_hover_text("–£–¥–∞–ª–∏—Ç—å").clicked() {
                                    self.decrypted_entries.remove(index_copy);
                                    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                                    if let Some(hovered_index) = self.hovered_password_index {
                                        if hovered_index == index_copy {
                                            self.hovered_password_index = None;
                                        } else if hovered_index > index_copy {
                                            self.hovered_password_index = Some(hovered_index - 1);
                                        }
                                    }
                                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                    self.save_vault();
                                }
                            });

                            ui.end_row();
                        }
                    }
                });
        });
    }

    // –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    fn show_edit_dialog_ui(&mut self, ctx: &egui::Context) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        let mut show_dialog = self.show_edit_dialog;
        if !show_dialog {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        let (mut service, mut login, mut password, index) = if let Some(ref entry) = self.edit_entry
        {
            (
                entry.service.clone(),
                entry.login.clone(),
                entry.password.clone(),
                entry.index,
            )
        } else {
            (String::new(), String::new(), String::new(), 0)
        };

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        egui::Window::new("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")
            .open(&mut show_dialog)
            .resizable(false)
            .default_width(400.0)
            .show(ctx, |ui| {
                ui.label("üåê –°–µ—Ä–≤–∏—Å:");
                ui.text_edit_singleline(&mut service);

                ui.label("üë§ –õ–æ–≥–∏–Ω:");
                ui.text_edit_singleline(&mut login);

                ui.label("üîë –ü–∞—Ä–æ–ª—å:");
                ui.text_edit_singleline(&mut password);

                ui.separator();

                ui.horizontal(|ui| {
                    if ui.button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å").clicked() {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
                        if index < self.decrypted_entries.len() {
                            self.decrypted_entries[index] = Entry {
                                service: service,
                                login: login,
                                password: password,
                            };
                            self.show_edit_dialog = false; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                            self.error_message.clear();
                            self.save_vault();
                        }
                    }

                    if ui.button("‚ùå –û—Ç–º–µ–Ω–∞").clicked() {
                        self.show_edit_dialog = false; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                    }
                });
            });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.show_edit_dialog = show_dialog;
        if !show_dialog {
            self.edit_entry = None;
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    fn add_new_entry(&mut self) {
        if self.new_service.is_empty() || self.new_login.is_empty() || self.new_password.is_empty()
        {
            self.error_message = "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã".to_string();
            return;
        }

        let new_entry = Entry {
            service: self.new_service.clone(),
            login: self.new_login.clone(),
            password: self.new_password.clone(),
        };

        self.decrypted_entries.push(new_entry);

        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
        self.new_service.clear();
        self.new_login.clear();
        self.new_password.clear();
        self.error_message.clear();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.save_vault();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    fn save_vault(&mut self) {
        if let (Some(path), ref master_password) = (&self.vault_path, &self.master_password) {
            match storage::create_encrypted_vault(&self.decrypted_entries, master_password, path) {
                Ok(new_vault) => {
                    self.current_vault = Some(new_vault);
                    self.error_message = "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!".to_string();
                }
                Err(e) => {
                    self.error_message = format!("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {}", e);
                }
            }
        } else {
            self.error_message = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è".to_string();
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    fn generate_password(&self, length: usize) -> String {
        use rand::{Rng, distr::Alphanumeric};
        rand::rng()
            .sample_iter(&Alphanumeric)
            .take(length)
            .map(char::from)
            .collect()
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    pub fn set_vault(
        &mut self,
        vault: Vault,
        entries: Vec<Entry>,
        master_password: String,
        path: PathBuf,
    ) {
        self.current_vault = Some(vault);
        self.decrypted_entries = entries;
        self.master_password = master_password;
        self.vault_path = Some(path);
    }

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (—Å zeroize)
    pub fn clear(&mut self) {
        self.clear_sensitive_data();
        self.current_vault = None;
        self.vault_path = None;
        self.new_service.clear();
        self.new_login.clear();
        self.edit_entry = None;
        self.show_edit_dialog = false;
        self.hovered_password_index = None;
        self.error_message.clear();
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    pub fn clear_sensitive_data(&mut self) {
        // –û—á–∏—â–∞–µ–º –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å
        self.master_password.zeroize();

        // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        self.new_password.zeroize();

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        for entry in &mut self.decrypted_entries {
            entry.zeroize();
        }
        self.decrypted_entries.clear();

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if let Some(ref mut edit_entry) = self.edit_entry {
            edit_entry.zeroize();
        }
    }
}
