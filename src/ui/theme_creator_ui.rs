use crate::theme::ThemeVisuals;
use dirs;
use eframe::egui;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ RGB (–≤–Ω–µ impl)
fn color_picker_rgb_ui(ui: &mut egui::Ui, color: &mut [u8; 3]) {
    ui.horizontal(|ui| {
        ui.add(
            egui::DragValue::new(&mut color[0])
                .range(0..=255)
                .prefix("R:"),
        );
        ui.add(
            egui::DragValue::new(&mut color[1])
                .range(0..=255)
                .prefix("G:"),
        );
        ui.add(
            egui::DragValue::new(&mut color[2])
                .range(0..=255)
                .prefix("B:"),
        );
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–≤–Ω–µ impl)
fn color_picker_ui(ui: &mut egui::Ui, color: &mut Option<[u8; 3]>) {
    let mut use_color = color.is_some();
    ui.checkbox(&mut use_color, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å");

    if use_color {
        let mut rgb = color.unwrap_or([255, 255, 255]);
        color_picker_rgb_ui(ui, &mut rgb);
        *color = Some(rgb);
    } else {
        *color = None;
    }
}

pub struct ThemeCreator {
    pub show: bool,
    pub theme_name: String,
    pub theme_data: ThemeVisuals,
    pub error_message: String,
    pub success_message: String,
}

impl ThemeCreator {
    pub fn new() -> Self {
        Self {
            show: false,
            theme_name: String::new(),
            theme_data: ThemeVisuals::default_dark(),
            error_message: String::new(),
            success_message: String::new(),
        }
    }

    pub fn show(&mut self, ctx: &egui::Context) {
        let mut show = self.show;
        egui::Window::new("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É")
            .open(&mut show)
            .resizable(true)
            .default_width(500.0)
            .default_height(600.0)
            .show(ctx, |ui| {
                self.ui(ui);
            });
        self.show = show;
    }

    fn ui(&mut self, ui: &mut egui::Ui) {
        ui.heading("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã");
        ui.separator();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if !self.error_message.is_empty() {
            ui.colored_label(egui::Color32::RED, &self.error_message);
            ui.separator();
        }

        if !self.success_message.is_empty() {
            ui.colored_label(egui::Color32::GREEN, &self.success_message);
            ui.separator();
        }

        // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        ui.label("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:");
        ui.text_edit_singleline(&mut self.theme_name);

        ui.separator();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        egui::ScrollArea::vertical().show(ui, |ui| {
            self.theme_settings_ui(ui);
        });

        ui.separator();

        // –ö–Ω–æ–ø–∫–∏
        ui.horizontal(|ui| {
            if ui.button("‚úÖ –°–æ–∑–¥–∞—Ç—å").clicked() {
                self.create_theme();
            }

            if ui.button("‚ùå –û—Ç–º–µ–Ω–∞").clicked() {
                self.show = false;
                self.clear_messages();
            }
        });
    }

    fn theme_settings_ui(&mut self, ui: &mut egui::Ui) {
        // Dark mode
        ui.checkbox(&mut self.theme_data.dark_mode, "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞");

        ui.separator();

        // –¶–≤–µ—Ç–∞
        ui.label("üé® –¶–≤–µ—Ç–∞:");

        // Override text color
        ui.label("–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (RGB):");
        color_picker_ui(ui, &mut self.theme_data.override_text_color);

        // Hyperlink color
        ui.label("–¶–≤–µ—Ç —Å—Å—ã–ª–æ–∫ (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.hyperlink_color);

        // Faint background color
        ui.label("–°–ª–∞–±—ã–π —Ñ–æ–Ω (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.faint_bg_color);

        // Extreme background color
        ui.label("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ñ–æ–Ω (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.extreme_bg_color);

        // Code background color
        ui.label("–§–æ–Ω –∫–æ–¥–∞ (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.code_bg_color);

        // Warning color
        ui.label("–¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.warn_fg_color);

        // Error color
        ui.label("–¶–≤–µ—Ç –æ—à–∏–±–æ–∫ (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.error_fg_color);

        // Window fill
        ui.label("–§–æ–Ω –æ–∫–æ–Ω (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.window_fill);

        // Panel fill
        ui.label("–§–æ–Ω –ø–∞–Ω–µ–ª–µ–π (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.panel_fill);

        ui.separator();

        // Window stroke
        ui.label("üé® –û–±–≤–æ–¥–∫–∞ –æ–∫–æ–Ω:");
        ui.label("–¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏ (RGB):");
        color_picker_rgb_ui(ui, &mut self.theme_data.window_stroke_color);

        ui.label("–®–∏—Ä–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏:");
        ui.add(egui::DragValue::new(&mut self.theme_data.window_stroke_width).speed(0.1));

        ui.separator();

        // –ü—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ui.label("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:");

        ui.label("–†–∞–∑–º–µ—Ä —É–≥–ª–∞ –æ–∫–Ω–∞:");
        ui.add(egui::DragValue::new(&mut self.theme_data.resize_corner_size).speed(1.0));

        ui.checkbox(&mut self.theme_data.button_frame, "–†–∞–º–∫–∞ –∫–Ω–æ–ø–æ–∫");
        ui.checkbox(
            &mut self.theme_data.collapsing_header_frame,
            "–†–∞–º–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
        );
        ui.checkbox(&mut self.theme_data.striped, "–ü–æ–ª–æ—Å–∞—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã");

        ui.label("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:");
        ui.add(egui::Slider::new(
            &mut self.theme_data.disabled_alpha,
            0.0..=1.0,
        ));
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
    fn create_theme(&mut self) {
        self.clear_messages();

        if self.theme_name.is_empty() {
            self.error_message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã".to_string();
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ç–µ–º—ã
        self.theme_data.name = self.theme_name.clone();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
        if self.save_theme() {
            self.success_message = format!("–¢–µ–º–∞ '{}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", self.theme_name);
        } else {
            self.error_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã".to_string();
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ —Ñ–∞–π–ª
    fn save_theme(&self) -> bool {
        if let Some(config_dir) = dirs::config_dir() {
            let app_dir = config_dir.join("shroombrella");
            let themes_dir = app_dir.join("themes");

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if let Err(_) = std::fs::create_dir_all(&themes_dir) {
                return false;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ —Ñ–∞–π–ª
            let theme_path = themes_dir.join(format!("{}.json", self.theme_name));
            match serde_json::to_string_pretty(&self.theme_data) {
                Ok(json) => std::fs::write(&theme_path, json).is_ok(),
                Err(_) => false,
            }
        } else {
            false
        }
    }

    pub fn clear_messages(&mut self) {
        self.error_message.clear();
        self.success_message.clear();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —à–∞–±–ª–æ–Ω–æ–º —Ç–µ–º—ã
    pub fn init_with_template(&mut self, template: ThemeVisuals) {
        self.theme_data = template;
        self.clear_messages();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞
    pub fn was_theme_created(&self) -> bool {
        !self.success_message.is_empty() && self.success_message.contains("—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    }
}
