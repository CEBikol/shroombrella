use crate::settings::Settings;
use dirs;
use eframe::egui;

pub struct SettingsWindow {
    pub show: bool,
    settings: Settings,        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –æ—Ç–∫–∞—Ç–∞)
    buffer_settings: Settings, // –ë—É—Ñ–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    available_themes: Vec<String>,

    // –§–ª–∞–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
    pub create_theme_requested: bool,

    // --- –ü–æ–ª–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã ---
    // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    pub theme_list_changed: bool,
    // -----------------------------------------------
}

impl SettingsWindow {
    pub fn new(settings: Settings) -> Self {
        let available_themes = settings.get_available_themes();
        let buffer_settings = settings.clone(); // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä

        Self {
            show: false,
            settings,        // –û—Ä–∏–≥–∏–Ω–∞–ª
            buffer_settings, // –ë—É—Ñ–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            available_themes,
            create_theme_requested: false,
            theme_list_changed: false, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        }
    }

    pub fn show(&mut self, ctx: &egui::Context) -> bool {
        let mut show = self.show;
        let mut settings_applied = false;
        egui::Window::new("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            .open(&mut show)
            .resizable(true)
            .default_width(400.0)
            .show(ctx, |ui| {
                settings_applied = self.ui(ui);
            });
        self.show = show;
        settings_applied
    }

    fn ui(&mut self, ui: &mut egui::Ui) -> bool {
        let mut settings_applied = false; // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        let mut local_theme_changed = false; // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–º/—Å–ø–∏—Å–∫–∞

        ui.heading("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        ui.separator();

        // --- –û—Å–Ω–æ–≤–Ω–æ–π UI –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

        // –í—ã–±–æ—Ä —Ç–µ–º—ã
        ui.label("üé® –¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:");

        egui::ComboBox::from_label("–¢–µ–º–∞")
            .selected_text(&self.buffer_settings.current_theme)
            .show_ui(ui, |ui| {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤–µ–∫—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –Ω–µ–º—É,
                // –Ω–µ –±–µ—Å–ø–æ–∫–æ—è—Å—å –æ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è—Ö self.available_themes
                let themes_to_show: Vec<String> = self.available_themes.clone();

                for theme_name in &themes_to_show {
                    let is_builtin = theme_name == "Dark" || theme_name == "Light";

                    ui.horizontal(|ui| {
                        if ui
                            .selectable_label(
                                &self.buffer_settings.current_theme == theme_name,
                                theme_name,
                            )
                            .clicked()
                        {
                            self.buffer_settings.current_theme = theme_name.clone();
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–º
                        if !is_builtin {
                            ui.add_space(5.0);

                            // --- –ò—Å–ø–æ–ª—å–∑—É–µ–º clone –¥–ª—è –∏–º–µ–Ω–∏ —Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–º—ã–∫–∞–Ω–∏–µ–º ---
                            let theme_name_clone = theme_name.clone();
                            // --- –ò—Å–ø–æ–ª—å–∑—É–µ–º clone –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∏–∑ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–º—ã–∫–∞–Ω–∏–µ–º ---
                            let current_buffer_theme = self.buffer_settings.current_theme.clone();

                            if ui.button("üóë").on_hover_text("–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É").clicked()
                            {
                                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º —Ç–µ–º—É
                                Self::delete_theme(&theme_name_clone);
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
                                self.refresh_themes();
                                // –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è
                                local_theme_changed = true;

                                // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ç–µ–º–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä
                                if current_buffer_theme == theme_name_clone {
                                    self.buffer_settings.current_theme = "Dark".to_string();
                                    // settings_applied –æ—Å—Ç–∞–Ω–µ—Ç—Å—è false, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                                    // –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
                                }
                            }
                        }
                    });
                }
            });
        ui.add_space(10.0);

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
        if ui.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É").clicked() {
            self.create_theme_requested = true;
        }

        ui.separator();

        // –ú–∞—Å—à—Ç–∞–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        ui.label("üîç –ú–∞—Å—à—Ç–∞–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:");
        ui.add(egui::Slider::new(&mut self.buffer_settings.ui_scale, 0.5..=3.0).text("–ú–∞—Å—à—Ç–∞–±"));
        ui.label(format!(
            "–¢–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±: {:.1}x",
            self.buffer_settings.ui_scale
        ));

        ui.separator();
        ui.separator();

        // –ö–Ω–æ–ø–∫–∏
        ui.horizontal(|ui| {
            if ui.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å").clicked() {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.settings = self.buffer_settings.clone();
                if let Err(e) = self.settings.save() {
                    println!("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {}", e);
                } else {
                    println!("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
                    settings_applied = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                    // –ï—Å–ª–∏ —Ç–µ–º–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± —ç—Ç–æ–º
                    if local_theme_changed {
                        self.theme_list_changed = true;
                    }
                }
            }

            if ui.button("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞").clicked() {
                // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.buffer_settings = self.settings.clone();
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–º
                local_theme_changed = false;
            }
        });

        // –ï—Å–ª–∏ —Ç–µ–º–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (—É–¥–∞–ª–µ–Ω–∞), –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞,
        // –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        if local_theme_changed && !settings_applied {
            self.theme_list_changed = true;
        }

        settings_applied // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
    pub fn take_create_theme_request(&mut self) -> bool {
        let requested = self.create_theme_requested;
        self.create_theme_requested = false;
        requested
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º
    pub fn take_theme_list_changed(&mut self) -> bool {
        let changed = self.theme_list_changed;
        self.theme_list_changed = false;
        changed
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ (–±—É—Ñ–µ—Ä–Ω—ã–µ) –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—à—Ç–∞–±–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
    // pub fn get_buffer_settings(&self) -> &Settings {
    //     &self.buffer_settings
    // }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ) –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    pub fn get_current_settings(&self) -> &Settings {
        &self.settings
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
    pub fn refresh_themes(&mut self) {
        self.available_themes = self.settings.get_available_themes();
        // –ë—É—Ñ–µ—Ä –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // self.buffer_settings = self.settings.clone(); // –£–±–∏—Ä–∞–µ–º —ç—Ç–æ
    }

    // --- –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ---
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    fn delete_theme(theme_name: &str) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ç–µ–º–∞
        if theme_name == "Dark" || theme_name == "Light" {
            println!("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ç–µ–º—É: {}", theme_name);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–µ–º—ã
        if let Some(config_dir) = dirs::config_dir() {
            let app_dir = config_dir.join("shroombrella");
            let themes_dir = app_dir.join("themes");
            let theme_path = themes_dir.join(format!("{}.json", theme_name));

            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
            match std::fs::remove_file(&theme_path) {
                Ok(_) => {
                    println!("–¢–µ–º–∞ '{}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", theme_name);
                }
                Err(e) => {
                    eprintln!("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã '{}': {}", theme_name, e);
                }
            }
        }
    }
}
