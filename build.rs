use std::env;
use std::process::Command;

fn main() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–±–æ—Ä–∫–∞ –∏–¥—ë—Ç –ø–æ–¥ Windows
    if env::var("TARGET").unwrap().contains("windows") {
        println!("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è Windows...");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π windres –¥–ª—è Linux
        let windres = if cfg!(target_os = "linux") {
            "x86_64-w64-mingw32-windres" // –î–ª—è Linux –∫—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        } else {
            "windres" // –î–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–π Windows
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é .rc ‚Üí .res
        let status = Command::new(windres)
            .args(&["shroombrella.rc", "-O", "coff", "-o", "shroombrella.res"])
            .status()
            .expect(&format!(
                "‚ùå {} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ mingw-w64-tools: sudo apt install mingw-w64-tools",
                windres
            ));

        if !status.success() {
            panic!("‚ùå {} failed", windres);
        }

        // –ü–µ—Ä–µ–¥–∞—ë–º .res –ª–∏–Ω–∫–æ–≤—â–∏–∫—É
        println!("cargo:rustc-link-arg=shroombrella.res");
    }
}
